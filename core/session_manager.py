# core/session_manager.py - Version optimis√©e sans complexit√© inutile
import uuid
import json
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List

from config.settings import settings
from models.entities import Session
from models.enums import SessionStatus  
from core.database import Database

class SessionManager:
    """Gestionnaire des sessions simplifi√© et efficace"""
    
    def __init__(self, db: Optional[Database] = None):
        self.db = db or Database()
        self.active_sessions: Dict[str, Session] = {}
        
        # Configuration simplifi√©e
        self.max_sessions = getattr(settings, 'max_sessions', 20)
        self.cleanup_after_days = getattr(settings, 'cleanup_after_days', 30)
        
        # Charger les sessions actives
        self._load_active_sessions()
        
        print(f"‚úÖ SessionManager simplifi√© initialis√©")
    
    def create_session(self, artist_name: str, metadata: Optional[Dict[str, Any]] = None) -> str:
        """Cr√©e une nouvelle session"""
        try:
            session_id = str(uuid.uuid4())
            current_time = datetime.now()
            
            session = Session(
                id=session_id,
                artist_name=artist_name,
                status=SessionStatus.IN_PROGRESS,
                current_step="created",
                created_at=current_time,
                updated_at=current_time,
                metadata=metadata or {}
            )
            
            # Sauvegarder en base
            self.db.save_session(session)
            
            # Ajouter aux sessions actives
            self.active_sessions[session_id] = session
            
            # Nettoyer si trop de sessions actives
            if len(self.active_sessions) > self.max_sessions:
                self._cleanup_old_active_sessions()
            
            print(f"‚ú® Session cr√©√©e: {session_id[:8]} - {artist_name}")
            return session_id
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur cr√©ation session: {e}")
            raise
    
    def get_session(self, session_id: str) -> Optional[Session]:
        """R√©cup√®re une session"""
        try:
            # V√©rifier en m√©moire d'abord
            if session_id in self.active_sessions:
                return self.active_sessions[session_id]
            
            # Charger depuis la base
            session = self.db.get_session(session_id)
            if session:
                # Ajouter aux sessions actives si elle est en cours
                if session.status == SessionStatus.IN_PROGRESS:
                    self.active_sessions[session_id] = session
            
            return session
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur r√©cup√©ration session {session_id}: {e}")
            return None
    
    def update_session(self, session: Session) -> bool:
        """Met √† jour une session"""
        try:
            session.updated_at = datetime.now()
            
            # Sauvegarder en base
            self.db.update_session(session)
            
            # Mettre √† jour en m√©moire
            if session.id in self.active_sessions:
                self.active_sessions[session.id] = session
            
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur mise √† jour session {session.id}: {e}")
            return False
    
    def complete_session(self, session_id: str, final_stats: Optional[Dict[str, Any]] = None) -> bool:
        """Marque une session comme termin√©e"""
        try:
            session = self.get_session(session_id)
            if not session:
                return False
            
            session.status = SessionStatus.COMPLETED
            session.current_step = "completed"
            session.updated_at = datetime.now()
            
            if final_stats:
                session.metadata.update({'final_stats': final_stats})
            
            result = self.update_session(session)
            
            # Retirer des sessions actives
            if session_id in self.active_sessions:
                del self.active_sessions[session_id]
            
            if result:
                print(f"‚úÖ Session termin√©e: {session_id[:8]}")
            
            return result
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur completion session {session_id}: {e}")
            return False
    
    def fail_session(self, session_id: str, error_message: str) -> bool:
        """Marque une session comme √©chou√©e"""
        try:
            session = self.get_session(session_id)
            if not session:
                return False
            
            session.status = SessionStatus.FAILED
            session.current_step = "failed"
            session.updated_at = datetime.now()
            session.metadata['error_message'] = error_message
            session.metadata['failed_at'] = datetime.now().isoformat()
            
            result = self.update_session(session)
            
            # Retirer des sessions actives
            if session_id in self.active_sessions:
                del self.active_sessions[session_id]
            
            if result:
                print(f"‚ùå Session √©chou√©e: {session_id[:8]} - {error_message}")
            
            return result
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur √©chec session {session_id}: {e}")
            return False
    
    def list_sessions(self, status: Optional[SessionStatus] = None, limit: Optional[int] = None) -> List[Session]:
        """Liste les sessions"""
        try:
            return self.db.list_sessions(status, limit)
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur listage sessions: {e}")
            return []
    
    def delete_session(self, session_id: str) -> bool:
        """Supprime une session"""
        try:
            # Retirer de la m√©moire
            if session_id in self.active_sessions:
                del self.active_sessions[session_id]
            
            # Supprimer de la base
            success = self.db.delete_session(session_id)
            
            if success:
                print(f"üóëÔ∏è Session supprim√©e: {session_id[:8]}")
            
            return success
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur suppression session {session_id}: {e}")
            return False
    
    def cleanup_old_sessions(self, days: Optional[int] = None) -> int:
        """Nettoie les anciennes sessions"""
        try:
            days = days or self.cleanup_after_days
            cutoff_date = datetime.now() - timedelta(days=days)
            
            # R√©cup√©rer les sessions anciennes
            all_sessions = self.db.list_sessions()
            old_sessions = [
                s for s in all_sessions 
                if s.updated_at and s.updated_at < cutoff_date
            ]
            
            # Supprimer les anciennes sessions
            deleted_count = 0
            for session in old_sessions:
                if self.delete_session(session.id):
                    deleted_count += 1
            
            if deleted_count > 0:
                print(f"üßπ {deleted_count} ancienne(s) session(s) supprim√©e(s)")
            
            return deleted_count
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur nettoyage anciennes sessions: {e}")
            return 0
    
    def get_stats(self) -> Dict[str, Any]:
        """Retourne les statistiques du gestionnaire"""
        try:
            all_sessions = self.db.list_sessions()
            
            stats = {
                'total_sessions': len(all_sessions),
                'active_sessions': len(self.active_sessions),
                'status_breakdown': {}
            }
            
            # R√©partition par statut
            for session in all_sessions:
                status = session.status.value if hasattr(session.status, 'value') else str(session.status)
                stats['status_breakdown'][status] = stats['status_breakdown'].get(status, 0) + 1
            
            return stats
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur r√©cup√©ration stats: {e}")
            return {}
    
    def _load_active_sessions(self):
        """Charge les sessions actives depuis la base"""
        try:
            in_progress_sessions = self.db.list_sessions(SessionStatus.IN_PROGRESS)
            paused_sessions = self.db.list_sessions(SessionStatus.PAUSED)
            
            for session in in_progress_sessions + paused_sessions:
                self.active_sessions[session.id] = session
            
            print(f"üì• {len(self.active_sessions)} session(s) active(s) charg√©e(s)")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur chargement sessions actives: {e}")
    
    def _cleanup_old_active_sessions(self):
        """Nettoie les sessions actives les plus anciennes"""
        try:
            # Trier par date de mise √† jour (plus ancien en premier)
            sorted_sessions = sorted(
                self.active_sessions.items(),
                key=lambda x: x[1].updated_at or datetime.min
            )
            
            # Retirer les plus anciennes
            sessions_to_remove = sorted_sessions[:len(sorted_sessions) - self.max_sessions + 2]
            
            for session_id, session in sessions_to_remove:
                # Sauvegarder une derni√®re fois
                try:
                    self.db.update_session(session)
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur sauvegarde finale session {session_id}: {e}")
                
                # Retirer de la m√©moire
                del self.active_sessions[session_id]
                print(f"üßπ Session {session_id[:8]} retir√©e des sessions actives")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur nettoyage sessions actives: {e}")

# Instance globale du gestionnaire de sessions
_session_manager = None

def get_session_manager() -> SessionManager:
    """R√©cup√®re l'instance globale du gestionnaire de sessions"""
    global _session_manager
    if _session_manager is None:
        _session_manager = SessionManager()
    return _session_manager

def reset_session_manager():
    """Remet √† z√©ro l'instance globale (pour les tests)"""
    global _session_manager
    _session_manager = None