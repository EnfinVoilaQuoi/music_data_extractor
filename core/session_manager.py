# core/session_manager.py - Version corrig√©e sans probl√®mes de freeze
import uuid
import json
import time
import threading
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List, Callable

from config.settings import settings
from models.entities import Session
from models.enums import SessionStatus  
from core.database import Database

# Import du gestionnaire de timezone
try:
    from utils.timezone_utils import now_france, to_france_timezone
    USE_FRANCE_TZ = True
except ImportError:
    # Fallback si le module n'existe pas encore
    def now_france():
        return datetime.now()
    def to_france_timezone(dt):
        return dt if dt else datetime.now()
    USE_FRANCE_TZ = False

class SessionManager:
    """Gestionnaire des sessions sans threading pour √©viter les freezes"""
    
    def __init__(self, db: Optional[Database] = None, enable_threading: bool = False):
        self.db = db or Database()
        self.active_sessions: Dict[str, Session] = {}
        
        # Configuration
        self.auto_save_interval = settings.get('sessions.auto_save_interval', 60)
        self.max_sessions = settings.get('sessions.max_sessions', 20)
        self.cleanup_after_days = settings.get('sessions.cleanup_after_days', 30)
        
        # Threading D√âSACTIV√â par d√©faut pour √©viter les freezes
        self.enable_threading = enable_threading
        self._sessions_modified = set()
        self._last_activity_time = None
        
        # Threading optionnel (d√©sactiv√© par d√©faut)
        self._auto_save_thread = None
        self._stop_auto_save = threading.Event()
        self._session_lock = threading.Lock() if enable_threading else None
        
        # Callbacks pour les √©v√©nements
        self.event_callbacks: Dict[str, List[Callable]] = {
            'session_created': [],
            'session_updated': [],
            'session_completed': [],
            'session_failed': [],
            'session_paused': [],
            'session_resumed': []
        }
        
        # Initialisation
        self._load_active_sessions()
        
        # Auto-save seulement si threading explicitement activ√©
        if enable_threading and settings.get('sessions.enable_auto_save', False):
            self._start_auto_save()
        
        threading_msg = "avec threading" if enable_threading else "sans threading (stable)"
        print(f"‚úÖ SessionManager initialis√© {threading_msg}")
    
    def _get_current_time(self) -> datetime:
        """Retourne l'heure actuelle selon la configuration timezone"""
        return now_france() if USE_FRANCE_TZ else datetime.now()
    
    def _normalize_datetime(self, dt: Optional[datetime]) -> Optional[datetime]:
        """Normalise une datetime pour √©viter les conflits timezone"""
        if dt is None:
            return None
        
        if USE_FRANCE_TZ:
            return to_france_timezone(dt)
        else:
            # Retirer la timezone pour √©viter les conflits
            return dt.replace(tzinfo=None) if dt.tzinfo else dt
    
    def _with_lock(self, func):
        """Ex√©cute une fonction avec ou sans lock selon la configuration"""
        if self.enable_threading and self._session_lock:
            with self._session_lock:
                return func()
        else:
            return func()
    
    def _mark_session_modified(self, session_id: str):
        """Marque une session comme modifi√©e"""
        self._sessions_modified.add(session_id)
        self._last_activity_time = self._get_current_time()
    
    def _start_auto_save(self):
        """D√©marre le thread de sauvegarde automatique (si threading activ√©)"""
        if not self.enable_threading:
            return
            
        if self._auto_save_thread and self._auto_save_thread.is_alive():
            return
        
        self._stop_auto_save.clear()
        self._auto_save_thread = threading.Thread(target=self._auto_save_worker, daemon=True)
        self._auto_save_thread.start()
        print(f"üîÑ Auto-sauvegarde d√©marr√©e (intervalle: {self.auto_save_interval}s)")
    
    def _auto_save_worker(self):
        """Worker pour la sauvegarde automatique"""
        while not self._stop_auto_save.wait(self.auto_save_interval):
            try:
                self._save_modified_sessions()
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur lors de la sauvegarde automatique: {e}")
    
    def _save_modified_sessions(self):
        """Sauvegarde seulement les sessions modifi√©es"""
        def _save_logic():
            if not self._sessions_modified:
                return
            
            saved_count = 0
            sessions_to_remove = set()
            
            for session_id in self._sessions_modified:
                if session_id in self.active_sessions:
                    try:
                        session = self.active_sessions[session_id]
                        self.db.update_session(session)
                        saved_count += 1
                        sessions_to_remove.add(session_id)
                    except Exception as e:
                        print(f"‚ö†Ô∏è Erreur sauvegarde session {session_id}: {e}")
            
            # Nettoyer la liste des sessions modifi√©es
            self._sessions_modified -= sessions_to_remove
            
            if saved_count > 0:
                print(f"üíæ {saved_count} session(s) modifi√©e(s) sauvegard√©e(s)")
        
        self._with_lock(_save_logic)
    
    def _save_all_sessions(self):
        """Sauvegarde toutes les sessions actives"""
        def _save_logic():
            saved_count = 0
            for session in self.active_sessions.values():
                try:
                    self.db.update_session(session)
                    saved_count += 1
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur sauvegarde session {session.id}: {e}")
            
            if saved_count > 0:
                print(f"üíæ {saved_count} session(s) sauvegard√©e(s)")
        
        self._with_lock(_save_logic)
    
    def _cleanup_old_active_sessions(self):
        """Nettoie les sessions actives les plus anciennes"""
        try:
            # Trier par date de mise √† jour (plus ancien en premier)
            sorted_sessions = sorted(
                self.active_sessions.items(),
                key=lambda x: x[1].updated_at or datetime.min
            )
            
            # Retirer les plus anciennes
            sessions_to_remove = sorted_sessions[:max(1, len(sorted_sessions) - self.max_sessions + 2)]
            
            for session_id, session in sessions_to_remove:
                # Sauvegarder une derni√®re fois
                try:
                    self.db.update_session(session)
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur sauvegarde finale session {session_id}: {e}")
                
                # Retirer de la m√©moire
                del self.active_sessions[session_id]
                self._sessions_modified.discard(session_id)
                print(f"üßπ Session {session_id[:8]} retir√©e des sessions actives")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur nettoyage sessions actives: {e}")
    
    def _load_active_sessions(self):
        """Charge les sessions actives depuis la base"""
        try:
            # Charger seulement les sessions en cours et en pause
            in_progress = self.db.list_sessions(SessionStatus.IN_PROGRESS, limit=self.max_sessions)
            paused = self.db.list_sessions(SessionStatus.PAUSED, limit=10)
            
            for session in in_progress + paused:
                # Normaliser les timestamps
                session.created_at = self._normalize_datetime(session.created_at)
                session.updated_at = self._normalize_datetime(session.updated_at)
                
                self.active_sessions[session.id] = session
            
            if self.active_sessions:
                print(f"üîÑ {len(self.active_sessions)} session(s) active(s) charg√©e(s)")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur chargement sessions (continuons sans): {e}")
    
    def create_session(self, artist_name: str, metadata: Optional[Dict[str, Any]] = None) -> str:
        """Cr√©e une nouvelle session SANS threading pour √©viter les freezes"""
        session_id = str(uuid.uuid4())
        current_time = self._get_current_time()
        
        session = Session(
            id=session_id,
            artist_name=artist_name,
            status=SessionStatus.IN_PROGRESS,
            current_step="initialization",
            created_at=current_time,
            updated_at=current_time,
            metadata=metadata or {}
        )
        
        try:
            def _create_logic():
                # V√©rifier la limite de sessions actives
                if len(self.active_sessions) >= self.max_sessions:
                    self._cleanup_old_active_sessions()
                
                # Ajouter la session
                self.active_sessions[session_id] = session
                self._mark_session_modified(session_id)
                return session_id
            
            # Ex√©cuter avec ou sans lock
            result_id = self._with_lock(_create_logic)
            
            # Sauvegarder en base IMM√âDIATEMENT (pas de thread)
            self.db.create_session(session)
            
            # D√©clencher l'√©v√©nement
            self._trigger_event('session_created', session)
            
            time_str = current_time.strftime('%H:%M:%S') if USE_FRANCE_TZ else current_time.strftime('%H:%M:%S UTC')
            print(f"‚ú® Session cr√©√©e ({time_str}): {session_id[:8]} pour {artist_name}")
            return session_id
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur cr√©ation session {artist_name}: {e}")
            # Nettoyer si erreur
            if session_id in self.active_sessions:
                del self.active_sessions[session_id]
            # Retourner quand m√™me l'ID pour que l'app continue
            return session_id
    
    def get_session(self, session_id: str) -> Optional[Session]:
        """R√©cup√®re une session par ID"""
        # Chercher en m√©moire d'abord
        if session_id in self.active_sessions:
            return self.active_sessions[session_id]
        
        # Puis en base
        try:
            session = self.db.get_session(session_id)
            if session:
                # Normaliser les timestamps
                session.created_at = self._normalize_datetime(session.created_at)
                session.updated_at = self._normalize_datetime(session.updated_at)
            return session
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur r√©cup√©ration session {session_id}: {e}")
            return None
    
    def update_session(self, session: Session) -> bool:
        """Met √† jour une session"""
        try:
            if not session or not session.id:
                print("‚ö†Ô∏è Session invalide pour mise √† jour")
                return False
            
            session.updated_at = self._get_current_time()
            
            def _update_logic():
                # Mettre √† jour en m√©moire
                self.active_sessions[session.id] = session
                self._mark_session_modified(session.id)
            
            self._with_lock(_update_logic)
            
            # Sauvegarder en base IMM√âDIATEMENT
            self.db.update_session(session)
            
            self._trigger_event('session_updated', session)
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur mise √† jour session {getattr(session, 'id', 'UNKNOWN')}: {e}")
            return False
    
    def update_session_by_id(self, session_id: str, **updates) -> bool:
        """Met √† jour une session par ID"""
        try:
            session = self.get_session(session_id)
            if not session:
                print(f"‚ö†Ô∏è Session {session_id} non trouv√©e pour mise √† jour")
                return False
            
            # Appliquer les mises √† jour
            for field, value in updates.items():
                if hasattr(session, field):
                    setattr(session, field, value)
                else:
                    print(f"‚ö†Ô∏è Champ {field} non trouv√© sur Session")
            
            return self.update_session(session)
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur mise √† jour session {session_id}: {e}")
            return False
    
    def complete_session(self, session_id: str, final_stats: Optional[Dict[str, Any]] = None) -> bool:
        """Marque une session comme termin√©e"""
        try:
            current_time = self._get_current_time()
            
            updates = {
                'status': SessionStatus.COMPLETED,
                'updated_at': current_time,
                'current_step': 'completed'
            }
            
            if final_stats:
                updates['metadata'] = {
                    **(self.get_session(session_id).metadata if self.get_session(session_id) else {}),
                    'final_stats': final_stats,
                    'completed_at': current_time.isoformat()
                }
            
            result = self.update_session_by_id(session_id, **updates)
            
            if result:
                session = self.get_session(session_id)
                if session:
                    self._trigger_event('session_completed', session)
                    print(f"‚úÖ Session termin√©e: {session_id[:8]}")
            
            return result
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur completion session {session_id}: {e}")
            return False
    
    def fail_session(self, session_id: str, error_message: str) -> bool:
        """Marque une session comme √©chou√©e"""
        try:
            session = self.get_session(session_id)
            if not session:
                print(f"‚ö†Ô∏è Session {session_id} non trouv√©e pour √©chec")
                return False
            
            current_time = self._get_current_time()
            session.status = SessionStatus.FAILED
            session.updated_at = current_time
            session.last_error = error_message
            session.metadata['error_message'] = error_message
            session.metadata['failed_at'] = current_time.isoformat()
            
            def _fail_logic():
                # Sauvegarder en base
                self.db.update_session(session)
                
                # Retirer des sessions actives
                if session_id in self.active_sessions:
                    del self.active_sessions[session_id]
                self._sessions_modified.discard(session_id)
            
            self._with_lock(_fail_logic)
            
            print(f"‚ùå Session √©chou√©e: {session_id[:8]} - {error_message}")
            self._trigger_event('session_failed', session)
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur √©chec session {session_id}: {e}")
            return False
    
    def pause_session(self, session_id: str) -> bool:
        """Met en pause une session"""
        result = self.update_session_by_id(session_id, status=SessionStatus.PAUSED)
        if result:
            session = self.get_session(session_id)
            if session:
                self._trigger_event('session_paused', session)
                print(f"‚è∏Ô∏è Session en pause: {session_id[:8]}")
        return result
    
    def resume_session(self, session_id: str) -> bool:
        """Reprend une session en pause"""
        result = self.update_session_by_id(session_id, status=SessionStatus.IN_PROGRESS)
        if result:
            session = self.get_session(session_id)
            if session:
                self._trigger_event('session_resumed', session)
                print(f"‚ñ∂Ô∏è Session reprise: {session_id[:8]}")
        return result
    
    def list_sessions(self, status: Optional[SessionStatus] = None, limit: Optional[int] = None) -> List[Session]:
        """Liste les sessions avec timestamps normalis√©s"""
        try:
            sessions = self.db.list_sessions(status, limit)
            
            # Normaliser les timestamps
            for session in sessions:
                session.created_at = self._normalize_datetime(session.created_at)
                session.updated_at = self._normalize_datetime(session.updated_at)
            
            return sessions
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur listage sessions: {e}")
            return []
    
    def delete_session(self, session_id: str) -> bool:
        """Supprime une session"""
        try:
            def _delete_logic():
                # Retirer de la m√©moire
                if session_id in self.active_sessions:
                    del self.active_sessions[session_id]
                self._sessions_modified.discard(session_id)
            
            self._with_lock(_delete_logic)
            
            # Supprimer de la base
            success = self.db.delete_session(session_id)
            
            if success:
                print(f"üóëÔ∏è Session supprim√©e: {session_id[:8]}")
            
            return success
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur suppression session {session_id}: {e}")
            return False
    
    def cleanup_old_sessions(self, days: Optional[int] = None) -> int:
        """Nettoie les anciennes sessions"""
        try:
            days = days or self.cleanup_after_days
            cutoff_date = self._get_current_time() - timedelta(days=days)
            
            # R√©cup√©rer les sessions anciennes
            old_sessions = []
            all_sessions = self.db.list_sessions()
            
            for session in all_sessions:
                session_date = self._normalize_datetime(session.updated_at or session.created_at)
                if session_date and session_date < cutoff_date:
                    old_sessions.append(session.id)
            
            # Supprimer les anciennes sessions
            deleted_count = 0
            for session_id in old_sessions:
                if self.delete_session(session_id):
                    deleted_count += 1
            
            if deleted_count > 0:
                print(f"üßπ {deleted_count} ancienne(s) session(s) supprim√©e(s)")
            
            return deleted_count
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur nettoyage anciennes sessions: {e}")
            return 0
    
    def get_stats(self) -> Dict[str, Any]:
        """Retourne les statistiques du gestionnaire"""
        try:
            all_sessions = self.db.list_sessions()
            
            stats = {
                'total_sessions': len(all_sessions),
                'active_sessions': len(self.active_sessions),
                'status_breakdown': {},
                'recent_activity': 0
            }
            
            # R√©partition par statut
            for session in all_sessions:
                status = session.status.value if hasattr(session.status, 'value') else str(session.status)
                stats['status_breakdown'][status] = stats['status_breakdown'].get(status, 0) + 1
            
            # Activit√© r√©cente (derni√®res 24h)
            recent_cutoff = self._get_current_time() - timedelta(hours=24)
            for session in all_sessions:
                session_date = self._normalize_datetime(session.updated_at or session.created_at)
                if session_date and session_date > recent_cutoff:
                    stats['recent_activity'] += 1
            
            return stats
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur r√©cup√©ration stats: {e}")
            return {}
    
    def add_event_callback(self, event_type: str, callback: Callable):
        """Ajoute un callback pour un √©v√©nement de session"""
        if event_type in self.event_callbacks:
            self.event_callbacks[event_type].append(callback)
        else:
            print(f"‚ö†Ô∏è Type d'√©v√©nement inconnu: {event_type}")
    
    def _trigger_event(self, event_type: str, session: Session):
        """D√©clenche les callbacks d'un √©v√©nement"""
        for callback in self.event_callbacks.get(event_type, []):
            try:
                callback(session)
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur callback {event_type}: {e}")
    
    def stop(self):
        """Arr√™te le gestionnaire de sessions proprement"""
        print("üõë Arr√™t du gestionnaire de sessions...")
        
        # Arr√™ter le thread de sauvegarde si activ√©
        if self._auto_save_thread:
            self._stop_auto_save.set()
            if self._auto_save_thread.is_alive():
                self._auto_save_thread.join(timeout=5)
        
        # Sauvegarder une derni√®re fois toutes les sessions actives
        self._save_all_sessions()
        
        print("‚úÖ Gestionnaire de sessions arr√™t√©")
    
    def force_save_all(self):
        """Force la sauvegarde de toutes les sessions actives"""
        self._save_all_sessions()
    
    def __enter__(self):
        """Support du context manager"""
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """Nettoyage automatique √† la sortie"""
        self.stop()


# Instance globale du gestionnaire de sessions
_session_manager = None

def get_session_manager(enable_threading: bool = False) -> SessionManager:
    """R√©cup√®re l'instance globale du gestionnaire de sessions"""
    global _session_manager
    if _session_manager is None:
        _session_manager = SessionManager(enable_threading=enable_threading)
    return _session_manager

def reset_session_manager():
    """Remet √† z√©ro l'instance globale (pour les tests)"""
    global _session_manager
    if _session_manager:
        _session_manager.stop()
    _session_manager = None

def create_session_safe(artist_name: str, metadata: dict = None, 
                       fallback_to_temp: bool = True) -> str:
    """
    Fonction utilitaire pour cr√©er une session de mani√®re s√©curis√©e.
    Fallback automatique vers session temporaire si probl√®me.
    """
    print(f"üîç Cr√©ation session s√©curis√©e pour {artist_name}")
    
    try:
        # Tentative normale sans threading
        session_manager = get_session_manager(enable_threading=False)
        session_id = session_manager.create_session(artist_name, metadata)
        print(f"‚úÖ Session normale cr√©√©e: {session_id[:8]}")
        return session_id
        
    except Exception as e:
        print(f"‚ö†Ô∏è √âchec cr√©ation normale: {e}")
        
        if fallback_to_temp:
            # Fallback vers session temporaire
            import time
            session_id = f"temp_{int(time.time())}_{str(uuid.uuid4())[:8]}"
            print(f"üîÑ Session temporaire cr√©√©e: {session_id}")
            return session_id
        else:
            raise e